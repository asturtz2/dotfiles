bindkey -v
source /usr/share/fzf/completion.zsh
source /usr/share/fzf/key-bindings.zsh
. ~/.nix-profile/etc/profile.d/nix.sh
eval "$(direnv hook zsh)"
# function search(){
#     aura -Ss $1
#     aura -As $1
# }

function upgrade(){
    backup-packages
    sudo aura -Syu
    sudo aura -Akyua
    sudo aura -Oj
}


function backup-packages(){
    # Copy list of installed packages for reinstallation
    echo "Copying list of installed packages."
    pacaur -Qqen > ~/dotfiles/arch/arch-pkgs.txt \
        && echo 'Arch package list saved.'
    pacaur -Qqem > ~/dotfiles/arch/aur-pkgs.txt \
        && echo 'Aur package list saved.'
}

# Commit all tracked dotfiles to github repo.
# GNU Stow required to symlink dotfiles to correct directories
function backup-dotfiles(){
    echo "Backing up dotfiles."
    git -C ~/dotfiles status -s
    echo 'Modified files in this list will be committed. What would you like to do?'
    echo "c) Continue q) Quit"
    commit(){ git -C ~/dotfiles commit -qam "Backup commit" \
                && git -C ~/dotfiles push -q \
                && echo 'Dotfiles successfully backed up.'; }
    read option;
    case $option in
        c) commit;;
        q) echo 'Exiting. Dotfiles were not backed up.';;
    esac
}

# Back up specific home directory data to Dropbox.
function backup-data(){
    source rclone-prompt
    echo "Backing up user data."
    rclone --ask-password=false sync --stats=1m ~/school dropbox:school
    rclone --ask-password=false  sync --stats=1m ~/documents dropbox:documents
    echo 'User data successfully backed up.'
    unset RCLONE_CONFIG_PASS
}

function backup-all(){
    echo "Starting full backup."
    backup-packages
    backup-dotfiles
    backup-data
    echo 'All backups successful.'
}

# function pac(){
#     sudo aura -S $1 || sudo aura -Ax $1
# }

function pacgit(){
    sudo aura -S --devel $1 || sudo aura -Ax --devel $1
}

function pacusage(){
    expac -H M '%m\t%n' | sort -rh | grep '^[2-9][0-9]'
}
# fd - cd to selected directory
fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                     -o \
                     -type d \
                     -print 2> /dev/null | fzf +m) && cd "$dir"
}

function _git_mergeready() { _git_checkout; }
compdef _git_mergeready git-mergeready
